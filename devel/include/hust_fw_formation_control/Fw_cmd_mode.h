// Generated by gencpp from file hust_fw_formation_control/Fw_cmd_mode.msg
// DO NOT EDIT!


#ifndef HUST_FW_FORMATION_CONTROL_MESSAGE_FW_CMD_MODE_H
#define HUST_FW_FORMATION_CONTROL_MESSAGE_FW_CMD_MODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hust_fw_formation_control
{
template <class ContainerAllocator>
struct Fw_cmd_mode_
{
  typedef Fw_cmd_mode_<ContainerAllocator> Type;

  Fw_cmd_mode_()
    : planeID(0)
    , need_idel(false)
    , need_take_off(false)
    , need_mission(false)
    , need_land(false)
    , need_formation(false)
    , need_protected(false)
    , swarm_shape(0)  {
    }
  Fw_cmd_mode_(const ContainerAllocator& _alloc)
    : planeID(0)
    , need_idel(false)
    , need_take_off(false)
    , need_mission(false)
    , need_land(false)
    , need_formation(false)
    , need_protected(false)
    , swarm_shape(0)  {
  (void)_alloc;
    }



   typedef uint16_t _planeID_type;
  _planeID_type planeID;

   typedef uint8_t _need_idel_type;
  _need_idel_type need_idel;

   typedef uint8_t _need_take_off_type;
  _need_take_off_type need_take_off;

   typedef uint8_t _need_mission_type;
  _need_mission_type need_mission;

   typedef uint8_t _need_land_type;
  _need_land_type need_land;

   typedef uint8_t _need_formation_type;
  _need_formation_type need_formation;

   typedef uint8_t _need_protected_type;
  _need_protected_type need_protected;

   typedef uint8_t _swarm_shape_type;
  _swarm_shape_type swarm_shape;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(One_column)
  #undef One_column
#endif
#if defined(_WIN32) && defined(Triangle)
  #undef Triangle
#endif
#if defined(_WIN32) && defined(One_row)
  #undef One_row
#endif

  enum {
    One_column = 0u,
    Triangle = 1u,
    One_row = 2u,
  };


  typedef boost::shared_ptr< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> const> ConstPtr;

}; // struct Fw_cmd_mode_

typedef ::hust_fw_formation_control::Fw_cmd_mode_<std::allocator<void> > Fw_cmd_mode;

typedef boost::shared_ptr< ::hust_fw_formation_control::Fw_cmd_mode > Fw_cmd_modePtr;
typedef boost::shared_ptr< ::hust_fw_formation_control::Fw_cmd_mode const> Fw_cmd_modeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator1> & lhs, const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator2> & rhs)
{
  return lhs.planeID == rhs.planeID &&
    lhs.need_idel == rhs.need_idel &&
    lhs.need_take_off == rhs.need_take_off &&
    lhs.need_mission == rhs.need_mission &&
    lhs.need_land == rhs.need_land &&
    lhs.need_formation == rhs.need_formation &&
    lhs.need_protected == rhs.need_protected &&
    lhs.swarm_shape == rhs.swarm_shape;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator1> & lhs, const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hust_fw_formation_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1df1161f0a9e91fb07222ee1046d0d1f";
  }

  static const char* value(const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1df1161f0a9e91fbULL;
  static const uint64_t static_value2 = 0x07222ee1046d0d1fULL;
};

template<class ContainerAllocator>
struct DataType< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hust_fw_formation_control/Fw_cmd_mode";
  }

  static const char* value(const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 planeID\n"
"\n"
"bool need_idel\n"
"\n"
"bool need_take_off\n"
"\n"
"bool need_mission\n"
"\n"
"bool need_land\n"
"\n"
"bool need_formation\n"
"\n"
"bool need_protected\n"
"\n"
"uint8 swarm_shape\n"
"\n"
"uint8 One_column=0\n"
"uint8 Triangle=1\n"
"uint8 One_row=2\n"
;
  }

  static const char* value(const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planeID);
      stream.next(m.need_idel);
      stream.next(m.need_take_off);
      stream.next(m.need_mission);
      stream.next(m.need_land);
      stream.next(m.need_formation);
      stream.next(m.need_protected);
      stream.next(m.swarm_shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fw_cmd_mode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hust_fw_formation_control::Fw_cmd_mode_<ContainerAllocator>& v)
  {
    s << indent << "planeID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.planeID);
    s << indent << "need_idel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.need_idel);
    s << indent << "need_take_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.need_take_off);
    s << indent << "need_mission: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.need_mission);
    s << indent << "need_land: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.need_land);
    s << indent << "need_formation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.need_formation);
    s << indent << "need_protected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.need_protected);
    s << indent << "swarm_shape: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swarm_shape);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUST_FW_FORMATION_CONTROL_MESSAGE_FW_CMD_MODE_H

// Generated by gencpp from file hust_fw_formation_control/FWcmd.msg
// DO NOT EDIT!


#ifndef HUST_FW_FORMATION_CONTROL_MESSAGE_FWCMD_H
#define HUST_FW_FORMATION_CONTROL_MESSAGE_FWCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hust_fw_formation_control
{
template <class ContainerAllocator>
struct FWcmd_
{
  typedef FWcmd_<ContainerAllocator> Type;

  FWcmd_()
    : cmd_mode()
    , pitch_angle_sp(0.0)
    , yaw_angle_sp(0.0)
    , roll_angle_sp(0.0)
    , throttle_sp(0.0)
    , t_flight(0.0)
    , date_pitch(0.0)
    , date_pitchcmd(0.0)
    , date_roll(0.0)
    , date_rollcmd(0.0)
    , date_v(0.0)
    , date_vcmd(0.0)
    , date_h(0.0)
    , date_hcmd(0.0)
    , date_vy(0.0)
    , date_vycmd(0.0)
    , date_delta_perr(0.0)
    , date_delta_verr(0.0)
    , date_delta_gd(0.0)
    , date_yaw(0.0)
    , date_yawcmd(0.0)
    , date_flag_zw(0.0)
    , z0(0.0)
    , z1(0.0)
    , z2(0.0)
    , z3(0.0)
    , z4(0.0)  {
    }
  FWcmd_(const ContainerAllocator& _alloc)
    : cmd_mode(_alloc)
    , pitch_angle_sp(0.0)
    , yaw_angle_sp(0.0)
    , roll_angle_sp(0.0)
    , throttle_sp(0.0)
    , t_flight(0.0)
    , date_pitch(0.0)
    , date_pitchcmd(0.0)
    , date_roll(0.0)
    , date_rollcmd(0.0)
    , date_v(0.0)
    , date_vcmd(0.0)
    , date_h(0.0)
    , date_hcmd(0.0)
    , date_vy(0.0)
    , date_vycmd(0.0)
    , date_delta_perr(0.0)
    , date_delta_verr(0.0)
    , date_delta_gd(0.0)
    , date_yaw(0.0)
    , date_yawcmd(0.0)
    , date_flag_zw(0.0)
    , z0(0.0)
    , z1(0.0)
    , z2(0.0)
    , z3(0.0)
    , z4(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_mode_type;
  _cmd_mode_type cmd_mode;

   typedef double _pitch_angle_sp_type;
  _pitch_angle_sp_type pitch_angle_sp;

   typedef double _yaw_angle_sp_type;
  _yaw_angle_sp_type yaw_angle_sp;

   typedef double _roll_angle_sp_type;
  _roll_angle_sp_type roll_angle_sp;

   typedef double _throttle_sp_type;
  _throttle_sp_type throttle_sp;

   typedef double _t_flight_type;
  _t_flight_type t_flight;

   typedef double _date_pitch_type;
  _date_pitch_type date_pitch;

   typedef double _date_pitchcmd_type;
  _date_pitchcmd_type date_pitchcmd;

   typedef double _date_roll_type;
  _date_roll_type date_roll;

   typedef double _date_rollcmd_type;
  _date_rollcmd_type date_rollcmd;

   typedef double _date_v_type;
  _date_v_type date_v;

   typedef double _date_vcmd_type;
  _date_vcmd_type date_vcmd;

   typedef double _date_h_type;
  _date_h_type date_h;

   typedef double _date_hcmd_type;
  _date_hcmd_type date_hcmd;

   typedef double _date_vy_type;
  _date_vy_type date_vy;

   typedef double _date_vycmd_type;
  _date_vycmd_type date_vycmd;

   typedef double _date_delta_perr_type;
  _date_delta_perr_type date_delta_perr;

   typedef double _date_delta_verr_type;
  _date_delta_verr_type date_delta_verr;

   typedef double _date_delta_gd_type;
  _date_delta_gd_type date_delta_gd;

   typedef double _date_yaw_type;
  _date_yaw_type date_yaw;

   typedef double _date_yawcmd_type;
  _date_yawcmd_type date_yawcmd;

   typedef double _date_flag_zw_type;
  _date_flag_zw_type date_flag_zw;

   typedef double _z0_type;
  _z0_type z0;

   typedef double _z1_type;
  _z1_type z1;

   typedef double _z2_type;
  _z2_type z2;

   typedef double _z3_type;
  _z3_type z3;

   typedef double _z4_type;
  _z4_type z4;





  typedef boost::shared_ptr< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> const> ConstPtr;

}; // struct FWcmd_

typedef ::hust_fw_formation_control::FWcmd_<std::allocator<void> > FWcmd;

typedef boost::shared_ptr< ::hust_fw_formation_control::FWcmd > FWcmdPtr;
typedef boost::shared_ptr< ::hust_fw_formation_control::FWcmd const> FWcmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hust_fw_formation_control::FWcmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hust_fw_formation_control::FWcmd_<ContainerAllocator1> & lhs, const ::hust_fw_formation_control::FWcmd_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_mode == rhs.cmd_mode &&
    lhs.pitch_angle_sp == rhs.pitch_angle_sp &&
    lhs.yaw_angle_sp == rhs.yaw_angle_sp &&
    lhs.roll_angle_sp == rhs.roll_angle_sp &&
    lhs.throttle_sp == rhs.throttle_sp &&
    lhs.t_flight == rhs.t_flight &&
    lhs.date_pitch == rhs.date_pitch &&
    lhs.date_pitchcmd == rhs.date_pitchcmd &&
    lhs.date_roll == rhs.date_roll &&
    lhs.date_rollcmd == rhs.date_rollcmd &&
    lhs.date_v == rhs.date_v &&
    lhs.date_vcmd == rhs.date_vcmd &&
    lhs.date_h == rhs.date_h &&
    lhs.date_hcmd == rhs.date_hcmd &&
    lhs.date_vy == rhs.date_vy &&
    lhs.date_vycmd == rhs.date_vycmd &&
    lhs.date_delta_perr == rhs.date_delta_perr &&
    lhs.date_delta_verr == rhs.date_delta_verr &&
    lhs.date_delta_gd == rhs.date_delta_gd &&
    lhs.date_yaw == rhs.date_yaw &&
    lhs.date_yawcmd == rhs.date_yawcmd &&
    lhs.date_flag_zw == rhs.date_flag_zw &&
    lhs.z0 == rhs.z0 &&
    lhs.z1 == rhs.z1 &&
    lhs.z2 == rhs.z2 &&
    lhs.z3 == rhs.z3 &&
    lhs.z4 == rhs.z4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hust_fw_formation_control::FWcmd_<ContainerAllocator1> & lhs, const ::hust_fw_formation_control::FWcmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hust_fw_formation_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1a541e09a3ea10b2429785cd152840b";
  }

  static const char* value(const ::hust_fw_formation_control::FWcmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1a541e09a3ea10bULL;
  static const uint64_t static_value2 = 0x2429785cd152840bULL;
};

template<class ContainerAllocator>
struct DataType< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hust_fw_formation_control/FWcmd";
  }

  static const char* value(const ::hust_fw_formation_control::FWcmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#固定翼控制指令的期望值		\n"
"string cmd_mode\n"
"\n"
"float64 pitch_angle_sp\n"
"\n"
"float64 yaw_angle_sp\n"
"\n"
"float64 roll_angle_sp\n"
"\n"
"float64 throttle_sp\n"
"\n"
"\n"
"float64 t_flight\n"
"float64 date_pitch\n"
"float64 date_pitchcmd\n"
"float64 date_roll\n"
"float64 date_rollcmd\n"
"float64 date_v\n"
"float64 date_vcmd\n"
"float64 date_h\n"
"float64 date_hcmd\n"
"float64 date_vy\n"
"float64 date_vycmd\n"
"float64 date_delta_perr\n"
"float64 date_delta_verr\n"
"float64 date_delta_gd\n"
"float64 date_yaw\n"
"float64 date_yawcmd\n"
"float64 date_flag_zw\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"float64 z0\n"
"\n"
"float64 z1\n"
"\n"
"float64 z2\n"
"\n"
"float64 z3\n"
"\n"
"float64 z4\n"
;
  }

  static const char* value(const ::hust_fw_formation_control::FWcmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_mode);
      stream.next(m.pitch_angle_sp);
      stream.next(m.yaw_angle_sp);
      stream.next(m.roll_angle_sp);
      stream.next(m.throttle_sp);
      stream.next(m.t_flight);
      stream.next(m.date_pitch);
      stream.next(m.date_pitchcmd);
      stream.next(m.date_roll);
      stream.next(m.date_rollcmd);
      stream.next(m.date_v);
      stream.next(m.date_vcmd);
      stream.next(m.date_h);
      stream.next(m.date_hcmd);
      stream.next(m.date_vy);
      stream.next(m.date_vycmd);
      stream.next(m.date_delta_perr);
      stream.next(m.date_delta_verr);
      stream.next(m.date_delta_gd);
      stream.next(m.date_yaw);
      stream.next(m.date_yawcmd);
      stream.next(m.date_flag_zw);
      stream.next(m.z0);
      stream.next(m.z1);
      stream.next(m.z2);
      stream.next(m.z3);
      stream.next(m.z4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FWcmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hust_fw_formation_control::FWcmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hust_fw_formation_control::FWcmd_<ContainerAllocator>& v)
  {
    s << indent << "cmd_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd_mode);
    s << indent << "pitch_angle_sp: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_angle_sp);
    s << indent << "yaw_angle_sp: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_angle_sp);
    s << indent << "roll_angle_sp: ";
    Printer<double>::stream(s, indent + "  ", v.roll_angle_sp);
    s << indent << "throttle_sp: ";
    Printer<double>::stream(s, indent + "  ", v.throttle_sp);
    s << indent << "t_flight: ";
    Printer<double>::stream(s, indent + "  ", v.t_flight);
    s << indent << "date_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.date_pitch);
    s << indent << "date_pitchcmd: ";
    Printer<double>::stream(s, indent + "  ", v.date_pitchcmd);
    s << indent << "date_roll: ";
    Printer<double>::stream(s, indent + "  ", v.date_roll);
    s << indent << "date_rollcmd: ";
    Printer<double>::stream(s, indent + "  ", v.date_rollcmd);
    s << indent << "date_v: ";
    Printer<double>::stream(s, indent + "  ", v.date_v);
    s << indent << "date_vcmd: ";
    Printer<double>::stream(s, indent + "  ", v.date_vcmd);
    s << indent << "date_h: ";
    Printer<double>::stream(s, indent + "  ", v.date_h);
    s << indent << "date_hcmd: ";
    Printer<double>::stream(s, indent + "  ", v.date_hcmd);
    s << indent << "date_vy: ";
    Printer<double>::stream(s, indent + "  ", v.date_vy);
    s << indent << "date_vycmd: ";
    Printer<double>::stream(s, indent + "  ", v.date_vycmd);
    s << indent << "date_delta_perr: ";
    Printer<double>::stream(s, indent + "  ", v.date_delta_perr);
    s << indent << "date_delta_verr: ";
    Printer<double>::stream(s, indent + "  ", v.date_delta_verr);
    s << indent << "date_delta_gd: ";
    Printer<double>::stream(s, indent + "  ", v.date_delta_gd);
    s << indent << "date_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.date_yaw);
    s << indent << "date_yawcmd: ";
    Printer<double>::stream(s, indent + "  ", v.date_yawcmd);
    s << indent << "date_flag_zw: ";
    Printer<double>::stream(s, indent + "  ", v.date_flag_zw);
    s << indent << "z0: ";
    Printer<double>::stream(s, indent + "  ", v.z0);
    s << indent << "z1: ";
    Printer<double>::stream(s, indent + "  ", v.z1);
    s << indent << "z2: ";
    Printer<double>::stream(s, indent + "  ", v.z2);
    s << indent << "z3: ";
    Printer<double>::stream(s, indent + "  ", v.z3);
    s << indent << "z4: ";
    Printer<double>::stream(s, indent + "  ", v.z4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUST_FW_FORMATION_CONTROL_MESSAGE_FWCMD_H

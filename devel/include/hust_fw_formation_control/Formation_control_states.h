// Generated by gencpp from file hust_fw_formation_control/Formation_control_states.msg
// DO NOT EDIT!


#ifndef HUST_FW_FORMATION_CONTROL_MESSAGE_FORMATION_CONTROL_STATES_H
#define HUST_FW_FORMATION_CONTROL_MESSAGE_FORMATION_CONTROL_STATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hust_fw_formation_control
{
template <class ContainerAllocator>
struct Formation_control_states_
{
  typedef Formation_control_states_<ContainerAllocator> Type;

  Formation_control_states_()
    : planeID(0)
    , sp_ned_vel_x(0.0)
    , sp_ned_vel_y(0.0)
    , sp_ned_vel_z(0.0)
    , sp_latitude(0.0)
    , sp_longitude(0.0)
    , sp_altitude(0.0)
    , sp_relative_alt(0.0)
    , sp_air_speed(0.0)
    , sp_ground_speed(0.0)
    , err_P_N(0.0)
    , err_P_E(0.0)
    , err_P_D(0.0)
    , err_P_NE(0.0)
    , err_PXk(0.0)
    , err_PYk(0.0)
    , err_PZk(0.0)
    , led_fol_vxk(0.0)
    , led_fol_vyk(0.0)
    , led_fol_vzk(0.0)
    , err_VXk(0.0)
    , err_VYk(0.0)
    , err_VZk(0.0)
    , led_fol_eta(0.0)
    , eta_deg(0.0)
    , err_PXb(0.0)
    , err_PYb(0.0)
    , err_PZb(0.0)
    , err_VXb(0.0)
    , err_VYb(0.0)
    , err_VZb(0.0)
    , led_fol_vxb(0.0)
    , led_fol_vyb(0.0)
    , led_fol_vzb(0.0)
    , a(0.0)
    , b(0.0)
    , c(0.0)  {
    }
  Formation_control_states_(const ContainerAllocator& _alloc)
    : planeID(0)
    , sp_ned_vel_x(0.0)
    , sp_ned_vel_y(0.0)
    , sp_ned_vel_z(0.0)
    , sp_latitude(0.0)
    , sp_longitude(0.0)
    , sp_altitude(0.0)
    , sp_relative_alt(0.0)
    , sp_air_speed(0.0)
    , sp_ground_speed(0.0)
    , err_P_N(0.0)
    , err_P_E(0.0)
    , err_P_D(0.0)
    , err_P_NE(0.0)
    , err_PXk(0.0)
    , err_PYk(0.0)
    , err_PZk(0.0)
    , led_fol_vxk(0.0)
    , led_fol_vyk(0.0)
    , led_fol_vzk(0.0)
    , err_VXk(0.0)
    , err_VYk(0.0)
    , err_VZk(0.0)
    , led_fol_eta(0.0)
    , eta_deg(0.0)
    , err_PXb(0.0)
    , err_PYb(0.0)
    , err_PZb(0.0)
    , err_VXb(0.0)
    , err_VYb(0.0)
    , err_VZb(0.0)
    , led_fol_vxb(0.0)
    , led_fol_vyb(0.0)
    , led_fol_vzb(0.0)
    , a(0.0)
    , b(0.0)
    , c(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _planeID_type;
  _planeID_type planeID;

   typedef double _sp_ned_vel_x_type;
  _sp_ned_vel_x_type sp_ned_vel_x;

   typedef double _sp_ned_vel_y_type;
  _sp_ned_vel_y_type sp_ned_vel_y;

   typedef double _sp_ned_vel_z_type;
  _sp_ned_vel_z_type sp_ned_vel_z;

   typedef double _sp_latitude_type;
  _sp_latitude_type sp_latitude;

   typedef double _sp_longitude_type;
  _sp_longitude_type sp_longitude;

   typedef double _sp_altitude_type;
  _sp_altitude_type sp_altitude;

   typedef double _sp_relative_alt_type;
  _sp_relative_alt_type sp_relative_alt;

   typedef double _sp_air_speed_type;
  _sp_air_speed_type sp_air_speed;

   typedef double _sp_ground_speed_type;
  _sp_ground_speed_type sp_ground_speed;

   typedef double _err_P_N_type;
  _err_P_N_type err_P_N;

   typedef double _err_P_E_type;
  _err_P_E_type err_P_E;

   typedef double _err_P_D_type;
  _err_P_D_type err_P_D;

   typedef double _err_P_NE_type;
  _err_P_NE_type err_P_NE;

   typedef double _err_PXk_type;
  _err_PXk_type err_PXk;

   typedef double _err_PYk_type;
  _err_PYk_type err_PYk;

   typedef double _err_PZk_type;
  _err_PZk_type err_PZk;

   typedef double _led_fol_vxk_type;
  _led_fol_vxk_type led_fol_vxk;

   typedef double _led_fol_vyk_type;
  _led_fol_vyk_type led_fol_vyk;

   typedef double _led_fol_vzk_type;
  _led_fol_vzk_type led_fol_vzk;

   typedef double _err_VXk_type;
  _err_VXk_type err_VXk;

   typedef double _err_VYk_type;
  _err_VYk_type err_VYk;

   typedef double _err_VZk_type;
  _err_VZk_type err_VZk;

   typedef double _led_fol_eta_type;
  _led_fol_eta_type led_fol_eta;

   typedef double _eta_deg_type;
  _eta_deg_type eta_deg;

   typedef double _err_PXb_type;
  _err_PXb_type err_PXb;

   typedef double _err_PYb_type;
  _err_PYb_type err_PYb;

   typedef double _err_PZb_type;
  _err_PZb_type err_PZb;

   typedef double _err_VXb_type;
  _err_VXb_type err_VXb;

   typedef double _err_VYb_type;
  _err_VYb_type err_VYb;

   typedef double _err_VZb_type;
  _err_VZb_type err_VZb;

   typedef double _led_fol_vxb_type;
  _led_fol_vxb_type led_fol_vxb;

   typedef double _led_fol_vyb_type;
  _led_fol_vyb_type led_fol_vyb;

   typedef double _led_fol_vzb_type;
  _led_fol_vzb_type led_fol_vzb;

   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _c_type;
  _c_type c;





  typedef boost::shared_ptr< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> const> ConstPtr;

}; // struct Formation_control_states_

typedef ::hust_fw_formation_control::Formation_control_states_<std::allocator<void> > Formation_control_states;

typedef boost::shared_ptr< ::hust_fw_formation_control::Formation_control_states > Formation_control_statesPtr;
typedef boost::shared_ptr< ::hust_fw_formation_control::Formation_control_states const> Formation_control_statesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator1> & lhs, const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator2> & rhs)
{
  return lhs.planeID == rhs.planeID &&
    lhs.sp_ned_vel_x == rhs.sp_ned_vel_x &&
    lhs.sp_ned_vel_y == rhs.sp_ned_vel_y &&
    lhs.sp_ned_vel_z == rhs.sp_ned_vel_z &&
    lhs.sp_latitude == rhs.sp_latitude &&
    lhs.sp_longitude == rhs.sp_longitude &&
    lhs.sp_altitude == rhs.sp_altitude &&
    lhs.sp_relative_alt == rhs.sp_relative_alt &&
    lhs.sp_air_speed == rhs.sp_air_speed &&
    lhs.sp_ground_speed == rhs.sp_ground_speed &&
    lhs.err_P_N == rhs.err_P_N &&
    lhs.err_P_E == rhs.err_P_E &&
    lhs.err_P_D == rhs.err_P_D &&
    lhs.err_P_NE == rhs.err_P_NE &&
    lhs.err_PXk == rhs.err_PXk &&
    lhs.err_PYk == rhs.err_PYk &&
    lhs.err_PZk == rhs.err_PZk &&
    lhs.led_fol_vxk == rhs.led_fol_vxk &&
    lhs.led_fol_vyk == rhs.led_fol_vyk &&
    lhs.led_fol_vzk == rhs.led_fol_vzk &&
    lhs.err_VXk == rhs.err_VXk &&
    lhs.err_VYk == rhs.err_VYk &&
    lhs.err_VZk == rhs.err_VZk &&
    lhs.led_fol_eta == rhs.led_fol_eta &&
    lhs.eta_deg == rhs.eta_deg &&
    lhs.err_PXb == rhs.err_PXb &&
    lhs.err_PYb == rhs.err_PYb &&
    lhs.err_PZb == rhs.err_PZb &&
    lhs.err_VXb == rhs.err_VXb &&
    lhs.err_VYb == rhs.err_VYb &&
    lhs.err_VZb == rhs.err_VZb &&
    lhs.led_fol_vxb == rhs.led_fol_vxb &&
    lhs.led_fol_vyb == rhs.led_fol_vyb &&
    lhs.led_fol_vzb == rhs.led_fol_vzb &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.c == rhs.c;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator1> & lhs, const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hust_fw_formation_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "add6e7cf7cfc8236a1710dcddb2c01ac";
  }

  static const char* value(const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadd6e7cf7cfc8236ULL;
  static const uint64_t static_value2 = 0xa1710dcddb2c01acULL;
};

template<class ContainerAllocator>
struct DataType< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hust_fw_formation_control/Formation_control_states";
  }

  static const char* value(const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#这里也要记得写上planeid，后面得向地面站发送哈！！！！\n"
"uint16 planeID\n"
"\n"
"#####################################编队控制器期望状态###############################\n"
"\n"
"#编队期望ned速度\n"
"float64 sp_ned_vel_x\n"
"float64 sp_ned_vel_y\n"
"float64 sp_ned_vel_z\n"
"\n"
"#编队期望经纬度\n"
"float64 sp_latitude\n"
"float64 sp_longitude\n"
"float64 sp_altitude\n"
"float64 sp_relative_alt\n"
"\n"
"#编队期望空速地速\n"
"float64 sp_air_speed\n"
"float64 sp_ground_speed\n"
"\n"
"#####################################编队控制器误差状态###############################\n"
"\n"
"#NED下的位置误差\n"
"float64 err_P_N\n"
"float64 err_P_E\n"
"float64 err_P_D\n"
"float64 err_P_NE\n"
"\n"
"#航迹轴系位置误差<与自己期望>\n"
"float64 err_PXk\n"
"float64 err_PYk\n"
"float64 err_PZk\n"
"\n"
"#航迹系速度误差<与领机>\n"
"float64 led_fol_vxk\n"
"float64 led_fol_vyk\n"
"float64 led_fol_vzk\n"
"\n"
"#航迹轴系速度误差<与自己期望>\n"
"float64 err_VXk\n"
"float64 err_VYk\n"
"float64 err_VZk\n"
"\n"
"#角度误差\n"
"float64 led_fol_eta\n"
"float64 eta_deg\n"
"\n"
"#体轴系位置误差<与自己期望>\n"
"float64 err_PXb\n"
"float64 err_PYb\n"
"float64 err_PZb\n"
"\n"
"#体轴系速度误差<与自己期望>\n"
"float64 err_VXb\n"
"float64 err_VYb\n"
"float64 err_VZb\n"
"\n"
"#体轴系速度误差<与领机>\n"
"float64 led_fol_vxb\n"
"float64 led_fol_vyb\n"
"float64 led_fol_vzb\n"
"\n"
"float64 a\n"
"float64 b\n"
"float64 c\n"
;
  }

  static const char* value(const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planeID);
      stream.next(m.sp_ned_vel_x);
      stream.next(m.sp_ned_vel_y);
      stream.next(m.sp_ned_vel_z);
      stream.next(m.sp_latitude);
      stream.next(m.sp_longitude);
      stream.next(m.sp_altitude);
      stream.next(m.sp_relative_alt);
      stream.next(m.sp_air_speed);
      stream.next(m.sp_ground_speed);
      stream.next(m.err_P_N);
      stream.next(m.err_P_E);
      stream.next(m.err_P_D);
      stream.next(m.err_P_NE);
      stream.next(m.err_PXk);
      stream.next(m.err_PYk);
      stream.next(m.err_PZk);
      stream.next(m.led_fol_vxk);
      stream.next(m.led_fol_vyk);
      stream.next(m.led_fol_vzk);
      stream.next(m.err_VXk);
      stream.next(m.err_VYk);
      stream.next(m.err_VZk);
      stream.next(m.led_fol_eta);
      stream.next(m.eta_deg);
      stream.next(m.err_PXb);
      stream.next(m.err_PYb);
      stream.next(m.err_PZb);
      stream.next(m.err_VXb);
      stream.next(m.err_VYb);
      stream.next(m.err_VZb);
      stream.next(m.led_fol_vxb);
      stream.next(m.led_fol_vyb);
      stream.next(m.led_fol_vzb);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Formation_control_states_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hust_fw_formation_control::Formation_control_states_<ContainerAllocator>& v)
  {
    s << indent << "planeID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.planeID);
    s << indent << "sp_ned_vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.sp_ned_vel_x);
    s << indent << "sp_ned_vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.sp_ned_vel_y);
    s << indent << "sp_ned_vel_z: ";
    Printer<double>::stream(s, indent + "  ", v.sp_ned_vel_z);
    s << indent << "sp_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.sp_latitude);
    s << indent << "sp_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.sp_longitude);
    s << indent << "sp_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.sp_altitude);
    s << indent << "sp_relative_alt: ";
    Printer<double>::stream(s, indent + "  ", v.sp_relative_alt);
    s << indent << "sp_air_speed: ";
    Printer<double>::stream(s, indent + "  ", v.sp_air_speed);
    s << indent << "sp_ground_speed: ";
    Printer<double>::stream(s, indent + "  ", v.sp_ground_speed);
    s << indent << "err_P_N: ";
    Printer<double>::stream(s, indent + "  ", v.err_P_N);
    s << indent << "err_P_E: ";
    Printer<double>::stream(s, indent + "  ", v.err_P_E);
    s << indent << "err_P_D: ";
    Printer<double>::stream(s, indent + "  ", v.err_P_D);
    s << indent << "err_P_NE: ";
    Printer<double>::stream(s, indent + "  ", v.err_P_NE);
    s << indent << "err_PXk: ";
    Printer<double>::stream(s, indent + "  ", v.err_PXk);
    s << indent << "err_PYk: ";
    Printer<double>::stream(s, indent + "  ", v.err_PYk);
    s << indent << "err_PZk: ";
    Printer<double>::stream(s, indent + "  ", v.err_PZk);
    s << indent << "led_fol_vxk: ";
    Printer<double>::stream(s, indent + "  ", v.led_fol_vxk);
    s << indent << "led_fol_vyk: ";
    Printer<double>::stream(s, indent + "  ", v.led_fol_vyk);
    s << indent << "led_fol_vzk: ";
    Printer<double>::stream(s, indent + "  ", v.led_fol_vzk);
    s << indent << "err_VXk: ";
    Printer<double>::stream(s, indent + "  ", v.err_VXk);
    s << indent << "err_VYk: ";
    Printer<double>::stream(s, indent + "  ", v.err_VYk);
    s << indent << "err_VZk: ";
    Printer<double>::stream(s, indent + "  ", v.err_VZk);
    s << indent << "led_fol_eta: ";
    Printer<double>::stream(s, indent + "  ", v.led_fol_eta);
    s << indent << "eta_deg: ";
    Printer<double>::stream(s, indent + "  ", v.eta_deg);
    s << indent << "err_PXb: ";
    Printer<double>::stream(s, indent + "  ", v.err_PXb);
    s << indent << "err_PYb: ";
    Printer<double>::stream(s, indent + "  ", v.err_PYb);
    s << indent << "err_PZb: ";
    Printer<double>::stream(s, indent + "  ", v.err_PZb);
    s << indent << "err_VXb: ";
    Printer<double>::stream(s, indent + "  ", v.err_VXb);
    s << indent << "err_VYb: ";
    Printer<double>::stream(s, indent + "  ", v.err_VYb);
    s << indent << "err_VZb: ";
    Printer<double>::stream(s, indent + "  ", v.err_VZb);
    s << indent << "led_fol_vxb: ";
    Printer<double>::stream(s, indent + "  ", v.led_fol_vxb);
    s << indent << "led_fol_vyb: ";
    Printer<double>::stream(s, indent + "  ", v.led_fol_vyb);
    s << indent << "led_fol_vzb: ";
    Printer<double>::stream(s, indent + "  ", v.led_fol_vzb);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUST_FW_FORMATION_CONTROL_MESSAGE_FORMATION_CONTROL_STATES_H

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hust_fw_formation_control/Formation_control_states.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Formation_control_states(genpy.Message):
  _md5sum = "add6e7cf7cfc8236a1710dcddb2c01ac"
  _type = "hust_fw_formation_control/Formation_control_states"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#这里也要记得写上planeid，后面得向地面站发送哈！！！！
uint16 planeID

#####################################编队控制器期望状态###############################

#编队期望ned速度
float64 sp_ned_vel_x
float64 sp_ned_vel_y
float64 sp_ned_vel_z

#编队期望经纬度
float64 sp_latitude
float64 sp_longitude
float64 sp_altitude
float64 sp_relative_alt

#编队期望空速地速
float64 sp_air_speed
float64 sp_ground_speed

#####################################编队控制器误差状态###############################

#NED下的位置误差
float64 err_P_N
float64 err_P_E
float64 err_P_D
float64 err_P_NE

#航迹轴系位置误差<与自己期望>
float64 err_PXk
float64 err_PYk
float64 err_PZk

#航迹系速度误差<与领机>
float64 led_fol_vxk
float64 led_fol_vyk
float64 led_fol_vzk

#航迹轴系速度误差<与自己期望>
float64 err_VXk
float64 err_VYk
float64 err_VZk

#角度误差
float64 led_fol_eta
float64 eta_deg

#体轴系位置误差<与自己期望>
float64 err_PXb
float64 err_PYb
float64 err_PZb

#体轴系速度误差<与自己期望>
float64 err_VXb
float64 err_VYb
float64 err_VZb

#体轴系速度误差<与领机>
float64 led_fol_vxb
float64 led_fol_vyb
float64 led_fol_vzb

float64 a
float64 b
float64 c"""
  __slots__ = ['planeID','sp_ned_vel_x','sp_ned_vel_y','sp_ned_vel_z','sp_latitude','sp_longitude','sp_altitude','sp_relative_alt','sp_air_speed','sp_ground_speed','err_P_N','err_P_E','err_P_D','err_P_NE','err_PXk','err_PYk','err_PZk','led_fol_vxk','led_fol_vyk','led_fol_vzk','err_VXk','err_VYk','err_VZk','led_fol_eta','eta_deg','err_PXb','err_PYb','err_PZb','err_VXb','err_VYb','err_VZb','led_fol_vxb','led_fol_vyb','led_fol_vzb','a','b','c']
  _slot_types = ['uint16','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planeID,sp_ned_vel_x,sp_ned_vel_y,sp_ned_vel_z,sp_latitude,sp_longitude,sp_altitude,sp_relative_alt,sp_air_speed,sp_ground_speed,err_P_N,err_P_E,err_P_D,err_P_NE,err_PXk,err_PYk,err_PZk,led_fol_vxk,led_fol_vyk,led_fol_vzk,err_VXk,err_VYk,err_VZk,led_fol_eta,eta_deg,err_PXb,err_PYb,err_PZb,err_VXb,err_VYb,err_VZb,led_fol_vxb,led_fol_vyb,led_fol_vzb,a,b,c

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Formation_control_states, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.planeID is None:
        self.planeID = 0
      if self.sp_ned_vel_x is None:
        self.sp_ned_vel_x = 0.
      if self.sp_ned_vel_y is None:
        self.sp_ned_vel_y = 0.
      if self.sp_ned_vel_z is None:
        self.sp_ned_vel_z = 0.
      if self.sp_latitude is None:
        self.sp_latitude = 0.
      if self.sp_longitude is None:
        self.sp_longitude = 0.
      if self.sp_altitude is None:
        self.sp_altitude = 0.
      if self.sp_relative_alt is None:
        self.sp_relative_alt = 0.
      if self.sp_air_speed is None:
        self.sp_air_speed = 0.
      if self.sp_ground_speed is None:
        self.sp_ground_speed = 0.
      if self.err_P_N is None:
        self.err_P_N = 0.
      if self.err_P_E is None:
        self.err_P_E = 0.
      if self.err_P_D is None:
        self.err_P_D = 0.
      if self.err_P_NE is None:
        self.err_P_NE = 0.
      if self.err_PXk is None:
        self.err_PXk = 0.
      if self.err_PYk is None:
        self.err_PYk = 0.
      if self.err_PZk is None:
        self.err_PZk = 0.
      if self.led_fol_vxk is None:
        self.led_fol_vxk = 0.
      if self.led_fol_vyk is None:
        self.led_fol_vyk = 0.
      if self.led_fol_vzk is None:
        self.led_fol_vzk = 0.
      if self.err_VXk is None:
        self.err_VXk = 0.
      if self.err_VYk is None:
        self.err_VYk = 0.
      if self.err_VZk is None:
        self.err_VZk = 0.
      if self.led_fol_eta is None:
        self.led_fol_eta = 0.
      if self.eta_deg is None:
        self.eta_deg = 0.
      if self.err_PXb is None:
        self.err_PXb = 0.
      if self.err_PYb is None:
        self.err_PYb = 0.
      if self.err_PZb is None:
        self.err_PZb = 0.
      if self.err_VXb is None:
        self.err_VXb = 0.
      if self.err_VYb is None:
        self.err_VYb = 0.
      if self.err_VZb is None:
        self.err_VZb = 0.
      if self.led_fol_vxb is None:
        self.led_fol_vxb = 0.
      if self.led_fol_vyb is None:
        self.led_fol_vyb = 0.
      if self.led_fol_vzb is None:
        self.led_fol_vzb = 0.
      if self.a is None:
        self.a = 0.
      if self.b is None:
        self.b = 0.
      if self.c is None:
        self.c = 0.
    else:
      self.planeID = 0
      self.sp_ned_vel_x = 0.
      self.sp_ned_vel_y = 0.
      self.sp_ned_vel_z = 0.
      self.sp_latitude = 0.
      self.sp_longitude = 0.
      self.sp_altitude = 0.
      self.sp_relative_alt = 0.
      self.sp_air_speed = 0.
      self.sp_ground_speed = 0.
      self.err_P_N = 0.
      self.err_P_E = 0.
      self.err_P_D = 0.
      self.err_P_NE = 0.
      self.err_PXk = 0.
      self.err_PYk = 0.
      self.err_PZk = 0.
      self.led_fol_vxk = 0.
      self.led_fol_vyk = 0.
      self.led_fol_vzk = 0.
      self.err_VXk = 0.
      self.err_VYk = 0.
      self.err_VZk = 0.
      self.led_fol_eta = 0.
      self.eta_deg = 0.
      self.err_PXb = 0.
      self.err_PYb = 0.
      self.err_PZb = 0.
      self.err_VXb = 0.
      self.err_VYb = 0.
      self.err_VZb = 0.
      self.led_fol_vxb = 0.
      self.led_fol_vyb = 0.
      self.led_fol_vzb = 0.
      self.a = 0.
      self.b = 0.
      self.c = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H36d().pack(_x.planeID, _x.sp_ned_vel_x, _x.sp_ned_vel_y, _x.sp_ned_vel_z, _x.sp_latitude, _x.sp_longitude, _x.sp_altitude, _x.sp_relative_alt, _x.sp_air_speed, _x.sp_ground_speed, _x.err_P_N, _x.err_P_E, _x.err_P_D, _x.err_P_NE, _x.err_PXk, _x.err_PYk, _x.err_PZk, _x.led_fol_vxk, _x.led_fol_vyk, _x.led_fol_vzk, _x.err_VXk, _x.err_VYk, _x.err_VZk, _x.led_fol_eta, _x.eta_deg, _x.err_PXb, _x.err_PYb, _x.err_PZb, _x.err_VXb, _x.err_VYb, _x.err_VZb, _x.led_fol_vxb, _x.led_fol_vyb, _x.led_fol_vzb, _x.a, _x.b, _x.c))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 290
      (_x.planeID, _x.sp_ned_vel_x, _x.sp_ned_vel_y, _x.sp_ned_vel_z, _x.sp_latitude, _x.sp_longitude, _x.sp_altitude, _x.sp_relative_alt, _x.sp_air_speed, _x.sp_ground_speed, _x.err_P_N, _x.err_P_E, _x.err_P_D, _x.err_P_NE, _x.err_PXk, _x.err_PYk, _x.err_PZk, _x.led_fol_vxk, _x.led_fol_vyk, _x.led_fol_vzk, _x.err_VXk, _x.err_VYk, _x.err_VZk, _x.led_fol_eta, _x.eta_deg, _x.err_PXb, _x.err_PYb, _x.err_PZb, _x.err_VXb, _x.err_VYb, _x.err_VZb, _x.led_fol_vxb, _x.led_fol_vyb, _x.led_fol_vzb, _x.a, _x.b, _x.c,) = _get_struct_H36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H36d().pack(_x.planeID, _x.sp_ned_vel_x, _x.sp_ned_vel_y, _x.sp_ned_vel_z, _x.sp_latitude, _x.sp_longitude, _x.sp_altitude, _x.sp_relative_alt, _x.sp_air_speed, _x.sp_ground_speed, _x.err_P_N, _x.err_P_E, _x.err_P_D, _x.err_P_NE, _x.err_PXk, _x.err_PYk, _x.err_PZk, _x.led_fol_vxk, _x.led_fol_vyk, _x.led_fol_vzk, _x.err_VXk, _x.err_VYk, _x.err_VZk, _x.led_fol_eta, _x.eta_deg, _x.err_PXb, _x.err_PYb, _x.err_PZb, _x.err_VXb, _x.err_VYb, _x.err_VZb, _x.led_fol_vxb, _x.led_fol_vyb, _x.led_fol_vzb, _x.a, _x.b, _x.c))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 290
      (_x.planeID, _x.sp_ned_vel_x, _x.sp_ned_vel_y, _x.sp_ned_vel_z, _x.sp_latitude, _x.sp_longitude, _x.sp_altitude, _x.sp_relative_alt, _x.sp_air_speed, _x.sp_ground_speed, _x.err_P_N, _x.err_P_E, _x.err_P_D, _x.err_P_NE, _x.err_PXk, _x.err_PYk, _x.err_PZk, _x.led_fol_vxk, _x.led_fol_vyk, _x.led_fol_vzk, _x.err_VXk, _x.err_VYk, _x.err_VZk, _x.led_fol_eta, _x.eta_deg, _x.err_PXb, _x.err_PYb, _x.err_PZb, _x.err_VXb, _x.err_VYb, _x.err_VZb, _x.led_fol_vxb, _x.led_fol_vyb, _x.led_fol_vzb, _x.a, _x.b, _x.c,) = _get_struct_H36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H36d = None
def _get_struct_H36d():
    global _struct_H36d
    if _struct_H36d is None:
        _struct_H36d = struct.Struct("<H36d")
    return _struct_H36d

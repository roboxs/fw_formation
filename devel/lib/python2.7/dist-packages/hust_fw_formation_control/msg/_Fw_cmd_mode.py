# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hust_fw_formation_control/Fw_cmd_mode.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Fw_cmd_mode(genpy.Message):
  _md5sum = "1df1161f0a9e91fb07222ee1046d0d1f"
  _type = "hust_fw_formation_control/Fw_cmd_mode"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 planeID

bool need_idel

bool need_take_off

bool need_mission

bool need_land

bool need_formation

bool need_protected

uint8 swarm_shape

uint8 One_column=0
uint8 Triangle=1
uint8 One_row=2
"""
  # Pseudo-constants
  One_column = 0
  Triangle = 1
  One_row = 2

  __slots__ = ['planeID','need_idel','need_take_off','need_mission','need_land','need_formation','need_protected','swarm_shape']
  _slot_types = ['uint16','bool','bool','bool','bool','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planeID,need_idel,need_take_off,need_mission,need_land,need_formation,need_protected,swarm_shape

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Fw_cmd_mode, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.planeID is None:
        self.planeID = 0
      if self.need_idel is None:
        self.need_idel = False
      if self.need_take_off is None:
        self.need_take_off = False
      if self.need_mission is None:
        self.need_mission = False
      if self.need_land is None:
        self.need_land = False
      if self.need_formation is None:
        self.need_formation = False
      if self.need_protected is None:
        self.need_protected = False
      if self.swarm_shape is None:
        self.swarm_shape = 0
    else:
      self.planeID = 0
      self.need_idel = False
      self.need_take_off = False
      self.need_mission = False
      self.need_land = False
      self.need_formation = False
      self.need_protected = False
      self.swarm_shape = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H7B().pack(_x.planeID, _x.need_idel, _x.need_take_off, _x.need_mission, _x.need_land, _x.need_formation, _x.need_protected, _x.swarm_shape))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.planeID, _x.need_idel, _x.need_take_off, _x.need_mission, _x.need_land, _x.need_formation, _x.need_protected, _x.swarm_shape,) = _get_struct_H7B().unpack(str[start:end])
      self.need_idel = bool(self.need_idel)
      self.need_take_off = bool(self.need_take_off)
      self.need_mission = bool(self.need_mission)
      self.need_land = bool(self.need_land)
      self.need_formation = bool(self.need_formation)
      self.need_protected = bool(self.need_protected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H7B().pack(_x.planeID, _x.need_idel, _x.need_take_off, _x.need_mission, _x.need_land, _x.need_formation, _x.need_protected, _x.swarm_shape))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.planeID, _x.need_idel, _x.need_take_off, _x.need_mission, _x.need_land, _x.need_formation, _x.need_protected, _x.swarm_shape,) = _get_struct_H7B().unpack(str[start:end])
      self.need_idel = bool(self.need_idel)
      self.need_take_off = bool(self.need_take_off)
      self.need_mission = bool(self.need_mission)
      self.need_land = bool(self.need_land)
      self.need_formation = bool(self.need_formation)
      self.need_protected = bool(self.need_protected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H7B = None
def _get_struct_H7B():
    global _struct_H7B
    if _struct_H7B is None:
        _struct_H7B = struct.Struct("<H7B")
    return _struct_H7B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hust_fw_formation_control/FWcmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FWcmd(genpy.Message):
  _md5sum = "b1a541e09a3ea10b2429785cd152840b"
  _type = "hust_fw_formation_control/FWcmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#固定翼控制指令的期望值		
string cmd_mode

float64 pitch_angle_sp

float64 yaw_angle_sp

float64 roll_angle_sp

float64 throttle_sp


float64 t_flight
float64 date_pitch
float64 date_pitchcmd
float64 date_roll
float64 date_rollcmd
float64 date_v
float64 date_vcmd
float64 date_h
float64 date_hcmd
float64 date_vy
float64 date_vycmd
float64 date_delta_perr
float64 date_delta_verr
float64 date_delta_gd
float64 date_yaw
float64 date_yawcmd
float64 date_flag_zw




























float64 z0

float64 z1

float64 z2

float64 z3

float64 z4"""
  __slots__ = ['cmd_mode','pitch_angle_sp','yaw_angle_sp','roll_angle_sp','throttle_sp','t_flight','date_pitch','date_pitchcmd','date_roll','date_rollcmd','date_v','date_vcmd','date_h','date_hcmd','date_vy','date_vycmd','date_delta_perr','date_delta_verr','date_delta_gd','date_yaw','date_yawcmd','date_flag_zw','z0','z1','z2','z3','z4']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_mode,pitch_angle_sp,yaw_angle_sp,roll_angle_sp,throttle_sp,t_flight,date_pitch,date_pitchcmd,date_roll,date_rollcmd,date_v,date_vcmd,date_h,date_hcmd,date_vy,date_vycmd,date_delta_perr,date_delta_verr,date_delta_gd,date_yaw,date_yawcmd,date_flag_zw,z0,z1,z2,z3,z4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FWcmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_mode is None:
        self.cmd_mode = ''
      if self.pitch_angle_sp is None:
        self.pitch_angle_sp = 0.
      if self.yaw_angle_sp is None:
        self.yaw_angle_sp = 0.
      if self.roll_angle_sp is None:
        self.roll_angle_sp = 0.
      if self.throttle_sp is None:
        self.throttle_sp = 0.
      if self.t_flight is None:
        self.t_flight = 0.
      if self.date_pitch is None:
        self.date_pitch = 0.
      if self.date_pitchcmd is None:
        self.date_pitchcmd = 0.
      if self.date_roll is None:
        self.date_roll = 0.
      if self.date_rollcmd is None:
        self.date_rollcmd = 0.
      if self.date_v is None:
        self.date_v = 0.
      if self.date_vcmd is None:
        self.date_vcmd = 0.
      if self.date_h is None:
        self.date_h = 0.
      if self.date_hcmd is None:
        self.date_hcmd = 0.
      if self.date_vy is None:
        self.date_vy = 0.
      if self.date_vycmd is None:
        self.date_vycmd = 0.
      if self.date_delta_perr is None:
        self.date_delta_perr = 0.
      if self.date_delta_verr is None:
        self.date_delta_verr = 0.
      if self.date_delta_gd is None:
        self.date_delta_gd = 0.
      if self.date_yaw is None:
        self.date_yaw = 0.
      if self.date_yawcmd is None:
        self.date_yawcmd = 0.
      if self.date_flag_zw is None:
        self.date_flag_zw = 0.
      if self.z0 is None:
        self.z0 = 0.
      if self.z1 is None:
        self.z1 = 0.
      if self.z2 is None:
        self.z2 = 0.
      if self.z3 is None:
        self.z3 = 0.
      if self.z4 is None:
        self.z4 = 0.
    else:
      self.cmd_mode = ''
      self.pitch_angle_sp = 0.
      self.yaw_angle_sp = 0.
      self.roll_angle_sp = 0.
      self.throttle_sp = 0.
      self.t_flight = 0.
      self.date_pitch = 0.
      self.date_pitchcmd = 0.
      self.date_roll = 0.
      self.date_rollcmd = 0.
      self.date_v = 0.
      self.date_vcmd = 0.
      self.date_h = 0.
      self.date_hcmd = 0.
      self.date_vy = 0.
      self.date_vycmd = 0.
      self.date_delta_perr = 0.
      self.date_delta_verr = 0.
      self.date_delta_gd = 0.
      self.date_yaw = 0.
      self.date_yawcmd = 0.
      self.date_flag_zw = 0.
      self.z0 = 0.
      self.z1 = 0.
      self.z2 = 0.
      self.z3 = 0.
      self.z4 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cmd_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_26d().pack(_x.pitch_angle_sp, _x.yaw_angle_sp, _x.roll_angle_sp, _x.throttle_sp, _x.t_flight, _x.date_pitch, _x.date_pitchcmd, _x.date_roll, _x.date_rollcmd, _x.date_v, _x.date_vcmd, _x.date_h, _x.date_hcmd, _x.date_vy, _x.date_vycmd, _x.date_delta_perr, _x.date_delta_verr, _x.date_delta_gd, _x.date_yaw, _x.date_yawcmd, _x.date_flag_zw, _x.z0, _x.z1, _x.z2, _x.z3, _x.z4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd_mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cmd_mode = str[start:end]
      _x = self
      start = end
      end += 208
      (_x.pitch_angle_sp, _x.yaw_angle_sp, _x.roll_angle_sp, _x.throttle_sp, _x.t_flight, _x.date_pitch, _x.date_pitchcmd, _x.date_roll, _x.date_rollcmd, _x.date_v, _x.date_vcmd, _x.date_h, _x.date_hcmd, _x.date_vy, _x.date_vycmd, _x.date_delta_perr, _x.date_delta_verr, _x.date_delta_gd, _x.date_yaw, _x.date_yawcmd, _x.date_flag_zw, _x.z0, _x.z1, _x.z2, _x.z3, _x.z4,) = _get_struct_26d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cmd_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_26d().pack(_x.pitch_angle_sp, _x.yaw_angle_sp, _x.roll_angle_sp, _x.throttle_sp, _x.t_flight, _x.date_pitch, _x.date_pitchcmd, _x.date_roll, _x.date_rollcmd, _x.date_v, _x.date_vcmd, _x.date_h, _x.date_hcmd, _x.date_vy, _x.date_vycmd, _x.date_delta_perr, _x.date_delta_verr, _x.date_delta_gd, _x.date_yaw, _x.date_yawcmd, _x.date_flag_zw, _x.z0, _x.z1, _x.z2, _x.z3, _x.z4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cmd_mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.cmd_mode = str[start:end]
      _x = self
      start = end
      end += 208
      (_x.pitch_angle_sp, _x.yaw_angle_sp, _x.roll_angle_sp, _x.throttle_sp, _x.t_flight, _x.date_pitch, _x.date_pitchcmd, _x.date_roll, _x.date_rollcmd, _x.date_v, _x.date_vcmd, _x.date_h, _x.date_hcmd, _x.date_vy, _x.date_vycmd, _x.date_delta_perr, _x.date_delta_verr, _x.date_delta_gd, _x.date_yaw, _x.date_yawcmd, _x.date_flag_zw, _x.z0, _x.z1, _x.z2, _x.z3, _x.z4,) = _get_struct_26d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_26d = None
def _get_struct_26d():
    global _struct_26d
    if _struct_26d is None:
        _struct_26d = struct.Struct("<26d")
    return _struct_26d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hust_fw_formation_control/Fwmonitor.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Fwmonitor(genpy.Message):
  _md5sum = "3094edf1d529e87912463a6fbc28d66c"
  _type = "hust_fw_formation_control/Fwmonitor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#飞机的控制状态，任务状态的flags，表示任务完成状况，飞机的飞行状态，失联状态，
#飞机控制保护状态

uint8 planeID#飞机编号

bool fw_complete_idel#飞机已经空闲

bool fw_is_connected #飞机链接地面站标志位

bool fw_is_wellctrlled #飞机控制状态标志位

bool fw_complete_takeoff #飞机已经起飞标志位

bool fw_complete_landed #飞机已经降落标志位

bool formation_distance_complete #飞机编队距离已经满足

bool formation_time_complete #飞机编队时间已经满足"""
  __slots__ = ['planeID','fw_complete_idel','fw_is_connected','fw_is_wellctrlled','fw_complete_takeoff','fw_complete_landed','formation_distance_complete','formation_time_complete']
  _slot_types = ['uint8','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planeID,fw_complete_idel,fw_is_connected,fw_is_wellctrlled,fw_complete_takeoff,fw_complete_landed,formation_distance_complete,formation_time_complete

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Fwmonitor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.planeID is None:
        self.planeID = 0
      if self.fw_complete_idel is None:
        self.fw_complete_idel = False
      if self.fw_is_connected is None:
        self.fw_is_connected = False
      if self.fw_is_wellctrlled is None:
        self.fw_is_wellctrlled = False
      if self.fw_complete_takeoff is None:
        self.fw_complete_takeoff = False
      if self.fw_complete_landed is None:
        self.fw_complete_landed = False
      if self.formation_distance_complete is None:
        self.formation_distance_complete = False
      if self.formation_time_complete is None:
        self.formation_time_complete = False
    else:
      self.planeID = 0
      self.fw_complete_idel = False
      self.fw_is_connected = False
      self.fw_is_wellctrlled = False
      self.fw_complete_takeoff = False
      self.fw_complete_landed = False
      self.formation_distance_complete = False
      self.formation_time_complete = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.planeID, _x.fw_complete_idel, _x.fw_is_connected, _x.fw_is_wellctrlled, _x.fw_complete_takeoff, _x.fw_complete_landed, _x.formation_distance_complete, _x.formation_time_complete))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.planeID, _x.fw_complete_idel, _x.fw_is_connected, _x.fw_is_wellctrlled, _x.fw_complete_takeoff, _x.fw_complete_landed, _x.formation_distance_complete, _x.formation_time_complete,) = _get_struct_8B().unpack(str[start:end])
      self.fw_complete_idel = bool(self.fw_complete_idel)
      self.fw_is_connected = bool(self.fw_is_connected)
      self.fw_is_wellctrlled = bool(self.fw_is_wellctrlled)
      self.fw_complete_takeoff = bool(self.fw_complete_takeoff)
      self.fw_complete_landed = bool(self.fw_complete_landed)
      self.formation_distance_complete = bool(self.formation_distance_complete)
      self.formation_time_complete = bool(self.formation_time_complete)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.planeID, _x.fw_complete_idel, _x.fw_is_connected, _x.fw_is_wellctrlled, _x.fw_complete_takeoff, _x.fw_complete_landed, _x.formation_distance_complete, _x.formation_time_complete))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.planeID, _x.fw_complete_idel, _x.fw_is_connected, _x.fw_is_wellctrlled, _x.fw_complete_takeoff, _x.fw_complete_landed, _x.formation_distance_complete, _x.formation_time_complete,) = _get_struct_8B().unpack(str[start:end])
      self.fw_complete_idel = bool(self.fw_complete_idel)
      self.fw_is_connected = bool(self.fw_is_connected)
      self.fw_is_wellctrlled = bool(self.fw_is_wellctrlled)
      self.fw_complete_takeoff = bool(self.fw_complete_takeoff)
      self.fw_complete_landed = bool(self.fw_complete_landed)
      self.formation_distance_complete = bool(self.formation_distance_complete)
      self.formation_time_complete = bool(self.formation_time_complete)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
